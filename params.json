{"name":"Compaginator","tagline":"A framework agnostic JavaScript pagination component written in CoffeeScript.","body":"# Philosophy\r\n\r\nCompaginator separates presentation from business logic in order to provide flexibility.  Exposing a single model that encapsulates the common pagination business logic, and then providing library/framework specific components for easy integration into existing code bases.\r\n\r\nYou should familiarise yourself with the core compaginator model, and then read the documentation relating to the component for your target library/framework.\r\n\r\n# Installation\r\n\r\nInclude the compaginator.min.js or compaginator.js file on your page.  \r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"compaginator.min.js\"></script>\r\n```\r\n\r\n# Compaginator.Model\r\n\r\nThis class represents the core compaginator model.  \r\n\r\n#### Example Usage (CoffeeScript)\r\n\r\n```coffee\r\npaginator = new Compaginator.Model()\r\npaginator.setNumPages 100\r\npaginator.setNumPagesDisplayed 10\r\npaginator.setNumPagesAnchored 2\r\npaginator.setCurrentPage 10\r\npages = paginator.getDisplayPages()\r\n\r\n# logs [1, 2, ..., 8, 9, 10, 11, 12, ..., 99, 100]\r\nconsole.log pages.map (page) -> return page.page\r\n```\r\n\r\nThe following methods form the public API for this class.\r\n\r\n| Method                       | Description\r\n|------------------------------|----------------------------------------\r\n| setCurrentPage(number)       | Set the current page of the paginator.\r\n| setNextPage()                | Set the next page as the current page.\r\n| setPrevPage()                | Set the prev page as the current page.\r\n| setNumPagesDisplayed(number) | Set the number of pages to be displayed when rendered.\r\n| setNumPagesAnchored(number)  | Set the number of pages to anchor at the start & end.\r\n| setNumPages(number)          | Set the total number of pages to paginate.\r\n| getCurrentPage()             | Returns the current page number.\r\n| getDisplayPages()            | Returns the subset of pages to render in the view.\r\n| observe(event, callback, [context]) | Observes the specified event and calls the callback whenever the event occurs.\r\n\r\n## Events\r\n\r\nThe following events can be passed to the obseve() method\r\n\r\n| Event                       | Description\r\n|-----------------------------|----------------------------------------\r\n| page-changed                | Triggered whenever the current page is changed.\r\n\r\n# Implementations\r\nCurrently there are example implementations for the following frameworks/libraries:\r\n\r\n- jQuery\r\n\r\nSupport for other frameworks & libraries will be coming soon. Until then you can refer to the jQuery implementation for guidance.\r\n\r\n## jQuery\r\n\r\nFor the full example please refer to the GitHub repo.\r\n\r\n#### Example Usage (CoffeeScript)\r\n\r\n```coffee\r\n$(document).ready ->\r\n\r\n  paginator = new Compaginator.Model()\r\n  paginator.setNumPages 20\r\n  paginator.observe 'page-changed', ->\r\n    topPaginatorView.render paginator, '.pagination-top'\r\n    bottomPaginatorView.render paginator, '.pagination-bottom'\r\n\r\n  topPaginatorView = new Compaginator.JqueryView paginator, '.pagination-top'\r\n  bottomPaginatorView = new Compaginator.JqueryView paginator, '.pagination-bottom'\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}